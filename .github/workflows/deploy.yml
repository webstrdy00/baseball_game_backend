name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/baseball-game:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 스크립트 실행
            mkdir -p ~/baseball-game
            cd ~/baseball-game

            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
            echo "REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS }}" >> .env
            echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env
            echo "USE_HTTPS=${{ secrets.USE_HTTPS }}" >> .env
            echo "ENVIRONMENT=production" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
            echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env

            # 도커 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/baseball-game:latest

            # 실행 중인 컨테이너 중지 및 제거
            docker stop baseball-app || true
            docker rm baseball-app || true

            # 이전 이미지 정리 (선택 사항)
            docker system prune -af --volumes

            # 새 컨테이너 실행
            docker run -d \
              --name baseball-app \
              -p 8080:8080 \
              --env-file .env \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/baseball-game:latest

            # 배포 상태 확인
            sleep 5
            if docker ps | grep baseball-app; then
              echo "배포 성공: 컨테이너가 실행 중입니다."
            else
              echo "배포 실패: 컨테이너가 실행되지 않았습니다."
              docker logs baseball-app
              exit 1
            fi
